@* 
Program Name: Index
Description: Provides functionality on the webpage for different game states
Inputs: current game state, username, tiles selected by players, ships
Outputs: different board states, players ships
Other sources: Chat GPT, Reddit, StackOverflow
Authors: John Mosley, Paul Dykes, Spencer Addis, Willem Battey, Aryamann Zutshi
Creation Date: September 10, 2024
*@

@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorBattleship.Shared
@inject NavigationManager Navigation
@implements IAsyncDisposable

<!-- display current gamestate as page title -->
<PageTitle>@currentGameState</PageTitle>

<!-- sidebar where ships are located along with button to toggle -->
<div class="sidebar @(isSidebarOpen ? "open" : "")">
    <Sidebar Ships="ships" HubConnection="hubConnection" UserName="@userName"/>
</div>

<button class="toggle-button" @onclick="ToggleSidebar"></button>

<!-- display your and opponents name at top of screen -->
<div class="game-area @(isSidebarOpen ? "shifted" : "")">
    <div class="leave">
        <button @onclick="LeaveRoom" hidden="@(room == 0)">Leave Game</button>
    </div>

    <div class="player-info">

        <div class="player-name">
            <h3>Your Name: @userName</h3>
        </div>

        <div class="opponent-name">
            <h3>Opponent: @opponent</h3>
        </div>

    </div>

<!-- initial game state when page is launched -->
@if ((currentGameState == GameState.Initial || userName == "") && room == 0)
    {
        <div class="name-entry-container">
            <div class="welcome-header">
                <h2>Welcome to Battleship</h2>
            </div>
            <div class="friends-header">
                <h2><span>Play</span> with Your Friends</h2>
            </div>
            <div class="enemies-header">
                <h2><span>Destroy</span> Your Enemies</h2>
            </div>
            <div class="name-entry-box">
                <label>
                    Enter your name:
                </label>
                @* name is entered and button to play game *@
                <input @bind="userName" placeholder="Enter Your Name..." />
                <div>
                    <input type="checkbox" id="playWithComp" name="playWithComp" value="playWithComp" />
                    <label for="playWithComp">Computer Opponent</label>
                </div>
                
                <button class="play-buton" @onclick="(() => {
                    currentGameState = GameState.ChooseRoom;
                    InvokeAsync(StateHasChanged);
                })">Play</button>
            </div>
        </div>
    }

    <!-- game state with buttons to join different rooms (lobbies) of game -->
    @if (currentGameState == GameState.ChooseRoom)
    {
        <div class="rooms">
            <button class="join-room" @onclick="(() => JoinRoom(1))">@roomStatuses[0]</button>
            <button class="join-room" @onclick="(() => JoinRoom(2))">@roomStatuses[1]</button>
            <button class="join-room" @onclick="(() => JoinRoom(3))">@roomStatuses[2]</button>
            <button class="join-room" @onclick="(() => JoinRoom(4))">@roomStatuses[3]</button>
            <button class="join-room" @onclick="(() => JoinRoom(5))">@roomStatuses[4]</button>
        </div>
    }

    @if (currentGameState == GameState.InLobby)
    {
        <div class="waiting-for-opponent">
            <h1>Waiting for Opponent to Join<span class="first">.</span><span class="second">.</span><span class="third">.</span></h1>
        </div>
    }

    @if (currentGameState == GameState.PickShips)
    {
        <div class="num-ships">
            <label>Enter number of ships:</label>
            <input @bind="shipLimit" />
            <button @onclick="SendShipNum">Enter</button>
        </div>
    }

    <!-- game state to wait for other player to choose ship -->
    @if (currentGameState == GameState.Waiting && shipLimit == 0)
    {
        <div class="waiting-for-ship-num">
            <p>@opponent is choosing the number of ships<span class="first">.</span><span class="second">.</span><span class="third">.</span></p>
        </div>
    }

    <div class="boards-wrapper">
    <!-- display main board -->
    @if (userName != "" && (currentGameState == GameState.Setup || currentGameState == GameState.Playing || currentGameState  == GameState.Waiting))
{
    // display either player is to be placing ships or "your board" if ships have been placed

        <div class="user-board @(currentGameState == GameState.Playing ? "minimized" : "")" hidden="@(currentGameState != GameState.Setup && currentGameState != GameState.Playing && currentGameState != GameState.Waiting)">
        <h3>@(currentGameState == GameState.Setup ? "Place your ships!" : "Your Board")</h3>

        <!-- display column names -->
        <div class="column-headers">
            <p /><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p>
        </div>
        
        @for (int y = 0; y < 10; y++)  // display board as rows of buttons (x, y) 
        {
            <div class="row">
                <button class="letter" disabled>@letters[y]</button>
                @for (int x = 0; x < 10; x++)
                {
                    int xCoord = x;//Capturing the x and Y coordinates so that their values at button creation are preserved.
                    int yCoord = y;
                    <button class="@(GetCellClass(xCoord, yCoord))"
                            @onclick='(() => { if(currentGameState == GameState.Setup && (shipCount < shipLimit)) PlaceShip(xCoord, yCoord, isShipHorizontal);})'
                            @onmouseover='(() => {if(currentGameState == GameState.Setup && (shipCount < shipLimit)) ShowShipPreview(xCoord, yCoord, isShipHorizontal); })'
                            @onmouseout='(() => { if(currentGameState == GameState.Setup && (shipCount < shipLimit)) HideShipPreview(xCoord, yCoord, isShipHorizontal); })'></button>
                }
            </div>
        }

        @* button to toggle ship orientation (vertical/horizontal) *@
        <div class="user-buttons">
            <div>
                <button @onclick="ToggleShipOrientation">@((isShipHorizontal ? "Horizontal" : "Vertical") + " Placement")</button>
            </div>

            @* button to start game *@
            @if (currentGameState == GameState.Setup)
            {
                <button class="square" @onclick="SendReadyMessage">Start Game</button>
            }

            @* button to leave game *@
        </div>
    </div>
}

<!-- display opponents board -->
@if (player2Ready && room != 0)
{
    <div class="opponent-board @(currentGameState == GameState.Playing ? "enlarged" : "")">
        <h3>@(opponent)'s Board</h3>
        <!-- display column labels -->
        <div class="column-headers">
            <p /><p>1</p><p>2</p><p>3</p><p>4</p><p>5</p><p>6</p><p>7</p><p>8</p><p>9</p><p>10</p>
        </div>

        <!-- set up game board for opponent as rows of buttons -->
        @for (int y = 0; y < 10; y++)
        {
            <div class="row">
                <button class="letter" disabled>@letters[y]</button>
                @for (int x = 0; x < 10; x++)
                {
                    int xCoord = x;//Capturing x and y coordinates so that their values at button creation are preserved.
                    int yCoord = y;
                    // button to select coord for firing
                    <button 
                    class="@(OpponentBoardInfo(xCoord, yCoord))"
                    @onclick='(() => {
                        SetCoordinates(xCoord, yCoord);
                    })'></button>
                }
            </div>
        }
    </div>

        <!-- Display selected coordinates in a text box -->
        <div class="fire-control">
            <button @onclick="Fire" disabled="@(!isTurn || !coordinates.HasValue || opponentDefaultBoard[coordinates.Value.x, coordinates.Value.y])">Fire</button>

            <!-- Display current selected coordinates -->
            <input type="text" value="@GetCoordinatesText()" readonly style="margin-left: 10px; width: 100px;" />
        </div>

        <ul id="messagesList">
            @foreach (var move in moves)
            {
                <li>@move</li>
            }
        </ul>
}
</div>
</div>
@code {
    #region Declarations
    #region Page Status
    private bool isSidebarOpen = false;
    #endregion
    #region Connection Information
    private HubConnection? hubConnection;
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
    public string[] roomStatuses = new string[5] { "Join Room 1", "Join Room 2", "Join Room 3", "Join Room 4", "Join Room 5" };
    private int room = 0;
    private bool player2Ready = false;
    #endregion
    #region Player Information
    private List<string> moves = new List<string>();
    private string userName = "";
    private (int x, int y)? coordinates = (0, 0);
    #endregion
    #region Boards
    // Game board tracking (10x10 grids for both players)
    private string letters = "ABCDEFGHIJ";
    private bool[,] playerBoard = new bool[10, 10]; // Stores player's ships
    private bool[,] previewBoard = new bool[10, 10]; // Stores ship previews
    private bool[,] opponentShots = new bool[10, 10]; // Stores the opponents previous shots
    private int[,] shipHPs = new int[10, 10];

    private bool[,] opponentBoard = new bool[10, 10]; // Stores hits/misses on opponent
    private bool[,] opponentDefaultBoard = new bool[10, 10]; // A default state for the opponents board when neither hit nor miss is recorded
    #endregion
    #region Game State Info
    private enum GameState { Initial, ChooseRoom, PickShips, Setup, Playing, Waiting, GameOver, InLobby }
    private GameState currentGameState = GameState.Initial;
    private string currentPlayer = "";
    private string opponent = "";
    private bool isPlayer1 = false; // whether player is player1
    #endregion
    #region Ship Parameters
    private Ship[]? ships; // array to keep track of all ships
    private bool isShipHorizontal = true; // To manage ship placement direction
    private int shipCount = 0; // number of ships
    private static int shipLimit; // to limit how many ships are out
    private bool isTurn = false; //keep track of players turn
    #endregion
    #endregion

    // to reset game board, loop through all tiles in board
    private void ResetBoard(bool[,] board)
    {
        for (int i = 0; i < 10; i++)
        {
            for (int j = 0; j < 10; j++)
            {
                // set tiles to false to indicate no ship or activity
                board[i, j] = false;
            }
        }
    }

    // reset the rest of the game
    private void Reset()
    {
        // all variables are changed to their initial values for the beginning of new game
        room = 0;
        player2Ready = false;
        coordinates = (0, 0);
        opponent = "";
        isShipHorizontal = true;
        shipCount = 0;
        shipLimit = 0;
        isTurn = false;

        // reset boards
        ResetBoard(playerBoard);
        ResetBoard(previewBoard);
        ResetBoard(opponentBoard);
        ResetBoard(opponentDefaultBoard);
        ResetBoard(opponentShots);

        // remove recorded moves
        while (moves.Count != 0)
        {
            moves.RemoveAt(moves.Count - 1);
        }
    }


    #region Modifier Functions
    private void SetCoordinates(int x, int y) //Sets the value of the coordinates tuple for later use
    {
        coordinates = (x, y);
    }
    private void ToggleShipOrientation() //Toggle ship orientation boolean to track whether or not a placed ship is vertical or horizontal
    {
        isShipHorizontal = !isShipHorizontal;
    }
    private void ToggleSidebar()
    {
        isSidebarOpen = !isSidebarOpen; //Toggles sidebar visibility
    }

    #region Board Modification
    #region Player Board
    private string GetCellClass(int x, int y)
    {
        /*Changes the type of grid space depending on whether or not a ship is currently there.
         * Effectively this allows for the preview to not override existing ships on the setup board.
        */
        if (playerBoard[x, y] && !opponentShots[x, y])//If there is a ship on this space and the opponent has not shot here yet
        {
            return "ship";//The space is of type ship
        }
        else if (playerBoard[x, y] && opponentShots[x, y])//If there is a ship on this space, and the opponent has shot here
        {
            return "hit";//The ship has been destroyed
        }
        else if (!playerBoard[x, y] && opponentShots[x, y])//If the opponent has shot a tile that does not have a ship on it
        {
            return "miss";//The opponent has missed
        }
        else if (previewBoard[x, y])//If the space has a preview of a ship
        {
            return "preview";//The space is of type preview
        }
        else//If none are true
        {
            return "square";//The space is blank
        }
    }

    // displays a preview of the ship placement starting at the given coordinates and in the chosen orientation
    private void ShowShipPreview(int startX, int startY, bool isHorizontal)
    {
        // ship length depending on what ships have already been placed
        int shipLength = shipCount + 1;

        // horizontal ship preview
        if (isHorizontal)
        {
            for (int i = 0; i < shipLength; i++)
            {
                if (startX + i < 10)
                {
                    previewBoard[startX + i, startY] = true; // mark which cells the ship is to take
                }
            }
        }
        // vertical ship preview
        else
        {
            for (int i = 0; i < shipLength; i++)
            {
                if (startY + i < 10)
                {
                    previewBoard[startX, startY + i] = true; // mark which cells the ship is to take
                }
            }
        }
    }

    // hides the ship preview from the board clearing preview cells
    private void HideShipPreview(int startX, int startY, bool isHorizontal)
    {
        int shipLength = shipCount + 1;

        // remove horizontal preview
        if (isHorizontal)
        {
            for (int i = 0; i < shipLength; i++)
            {
                if (startX + i < 10)
                {
                    previewBoard[startX + i, startY] = false; // toggle off preview
                }
            }
        }

        // for vertical ships
        else
        {
            for (int i = 0; i < shipLength; i++)
            {
                if (startY + i < 10)
                {
                    previewBoard[startX, startY + i] = false; // toggle off preview
                }
            }
        }
    }

    // places a ship at given coords and updates the board and ship count
    private void PlaceShip(int startX, int startY, bool isHorizontal)
    {
        int shipLength = shipCount + 1; // Determine ship length based on the current count
        bool canPlace = true; // Flag to track if placement is possible

        // Check if ship fits and if the cells are free
        if (isHorizontal)
        {
            if (startX + shipLength <= 10) // Check if it fits horizontally
            {
                for (int i = 0; i < shipLength; i++)
                {
                    if (playerBoard[startX + i, startY]) // Check for overlap
                    {
                        canPlace = false;
                        break;
                    }
                }
            }
            else
            {
                canPlace = false;
            }
        }
        else // Vertical placement
        {
            if (startY + shipLength <= 10) // Check if it fits vertically
            {
                for (int i = 0; i < shipLength; i++)
                {
                    if (playerBoard[startX, startY + i]) // Check for overlap
                    {
                        canPlace = false;
                        break;
                    }
                }
            }
            else
            {
                canPlace = false;
            }
        }

        // Place the ship if there is no overlap
        if (canPlace)
        {
            for (int i = 0; i < shipLength; i++)
            {
                if (isHorizontal)
                    playerBoard[startX + i, startY] = true; // Mark cells as occupied
                else
                    playerBoard[startX, startY + i] = true; // Mark cells as occupied
            }
            shipCount++; // Increment ship count after successful placement
        }
    }

    #endregion
    #region Opponent Board
    // return the css class for the opponents board tiles based on the game state
    private string OpponentBoardInfo(int x, int y)
    {

        if (coordinates.HasValue && coordinates.Value.x == x && coordinates.Value.y == y && !opponentDefaultBoard[x, y])
        {
            return "hit-preview"; // display preview where the player is about to fire
        }

        else if (opponentDefaultBoard[x, y] && opponentBoard[x, y])
        {
            return "hit"; // display hit was made on this tile
        }
        else if (opponentDefaultBoard[x, y] && !opponentBoard[x, y])
        {
            return "miss"; // display miss was made on this tile
        }
        else
        {
            return "square"; // display no activity in this tile
        }
    }
    #endregion
    #endregion
    #endregion

    #region Accessor Functions
    // Helper function to display the selected coordinates in the text box
    private string GetCoordinatesText()
    {
        return coordinates.HasValue ? $"{coordinates.Value.x}, {coordinates.Value.y}" : "None";
    }
    #endregion

    #region Networking Functionality
    //  runs when client connects
    protected override async Task OnInitializedAsync()
    {
        // create a new connection to the hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub")) // connect to SignalR hub at url
            .WithAutomaticReconnect() // reconnect automatically if disconnected
            .Build();

        // when a new user has joined ANY of the rooms, update the page to show the new user in their room
        hubConnection.On<List<List<string>>>("ReceiveRooms", (playersInRooms) =>
        {
            for (int i = 0; i < 5; i++) //iterate through all rooms
            {
                //System.Diagnostics.Debug.WriteLine(playersInRooms[i - 1].Count);
                if (playersInRooms[i].Count == 0)
                {
                    roomStatuses[i] = $"Room {i + 1} is empty"; // when no players are in room
                }
                if (playersInRooms[i].Count == 1)
                {
                    roomStatuses[i] = $"{playersInRooms[i][0]} is waiting"; // one player in room
                }
                // if room has 2 players and you are in it
                if (playersInRooms[i].Count == 2 && playersInRooms[i].Contains(userName))
                {
                    if (playersInRooms[i][0] == userName)
                    {
                        isPlayer1 = true; // establish who is player1
                        isTurn = true; // player 1s turn is first
                        opponent = playersInRooms[i][1]; // establish player 1s opponent
                        currentGameState = GameState.PickShips; // allow to pick ships
                    }
                    else
                    {
                        isPlayer1 = false; // player 2 is here
                        isTurn = false; // player 2 goes after player 1
                        opponent = playersInRooms[i][0]; // establish player 2s opponent
                        currentGameState = GameState.Waiting; // wait to place ships
                    }
                }
                else if (playersInRooms[i].Count == 2) // when you are not in a full room display who is in it
                {
                    roomStatuses[i] = $"{playersInRooms[i][0]} and {playersInRooms[i][1]} are playing";
                }
            }
            InvokeAsync(StateHasChanged); // refresh after updating room status
        });

        // when player leaves room
        hubConnection.On<string>("PlayerLeft", (user) =>
        {
            moves.Add($"{user} has left the room.");
            currentGameState = GameState.InLobby; // Or return to the lobby
            InvokeAsync(StateHasChanged);
        });

        // when ship number is received from opponent
        hubConnection.On<int>("ReceiveShipNum", (sl) =>
        {
            shipLimit = sl; // set number of ships
            ships = new Ship[shipLimit]; // establish array for ships based on number of ships
            currentGameState = GameState.Setup; // set game state to set up ships
            InvokeAsync(StateHasChanged); // refresh ui
        });

        // when opponent wants to start game
        hubConnection.On("ReceiveReadyMessage", () =>
        {
            player2Ready = true; // change player 2 ready status
            InvokeAsync(StateHasChanged); //refresh ui
        });

        // update the page to show the new user

        // when a user and message are received from the connection...

        // when opponent fires shot
        hubConnection.On<string, int, int>("ReceiveCoordinates", (user, x, y) =>
        {
            opponentShots[x, y] = true; // record shot on own board
            currentGameState = GameState.Playing; // change game state to playing so it is current players turn
            Ship? hitShip = null;

            if (ships is not null)
            {
                foreach (var ship in ships)
                {

                    if (ship is not null && ship.IsHit(x, y))
                    {
                        hitShip = ship;
                        break;
                    }
                }
            }

            // decrease health of ship and check if sunk
            if (hitShip != null)
            {
                hitShip.DeductHP();

                // if health is completely depleted
                if (hitShip.IsDestroyed())
                {
                    var shipDestructionMessage = $"{hitShip.name} is destroyed!"; // display message in moves
                    moves.Add(shipDestructionMessage);
                }
                // if health is remaining
                else
                {
                    // display health left
                    var shipHitMessage = $"Hit on {hitShip.name}! {hitShip.name} has {hitShip.hp} hit points left.";
                    moves.Add(shipHitMessage);
                }
            }

            // send hit/miss to opponents client
            hubConnection.SendAsync("SendHitMiss", room, playerBoard[x, y]);
            var shotMessage = $"{user} fires at {x} , {y}";
            moves.Add(shotMessage);
            isTurn = true; // it is now current players turn after opponent shoots
            InvokeAsync(StateHasChanged); // refresh ui
        });

        // handle response from opponent when firing
        hubConnection.On<bool>("ShotResponse", (wasHit) =>
        {
            string message;

            if (coordinates.HasValue)
            {
                // update opponent board
                if (wasHit)
                {
                    message = $"Your Shot at {coordinates} was a hit!";
                    opponentBoard[coordinates.Value.x, coordinates.Value.y] = true;
                    opponentDefaultBoard[coordinates.Value.x, coordinates.Value.y] = true;
                    // Update board status for hit
                }
                // update opponent board
                else
                {
                    message = $" Your Shot at {coordinates} was a miss!";
                    opponentDefaultBoard[coordinates.Value.x, coordinates.Value.y] = true;
                }
                // Check if all ships are sunk for game over condition
                var formattedMessage = message;
                moves.Add(formattedMessage);
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("GetRooms");
    }

    // to join room
    private async Task JoinRoom(int roomNum)
    {
        // send room number to server and change game state to in lobby
        if (hubConnection is not null)
        {
            room = roomNum;
            currentGameState = GameState.InLobby;
            await hubConnection.SendAsync("JoinRoom", userName, roomNum);
        }
    }

    // to leave room
    private async Task LeaveRoom()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("LeaveRoom", userName, room);

            // Reset game state and room information locally
            currentGameState = GameState.ChooseRoom; // Return to room selection screen
            Reset(); // Clear game state (boards, ships, etc.)

            room = 0; // Reset room number
            isTurn = false; // Reset turn state
            player2Ready = false; // Reset opponent readiness
            opponent = ""; // Clear opponent name
        }
    }

    // send number of ships to server
    private async Task SendShipNum()
    {
        if (hubConnection is not null)
        {
            ships = new Ship[shipLimit]; // ship array based on number of ships
            await hubConnection.SendAsync("SendShipNum", room, shipLimit);
        }
    }

    // signal server when player is ready
    private async Task SendReadyMessage()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendReadyMessage", room, shipLimit);
            currentGameState = GameState.Setup; // change game state to allow player to set up
        }
    }

    // send shot coords to server
    private async Task Fire()
    {
        if (hubConnection is not null && coordinates.HasValue)
        {
            // give room (game) and x, y coords
            await hubConnection.SendAsync("SendCoordinates", userName, room, coordinates.Value.x, coordinates.Value.y);
            currentGameState = GameState.Waiting; // wait for next turn
            isTurn = false;
            await InvokeAsync(StateHasChanged); // refresh ui
        }
    }

    // shut down server connection
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    #endregion
    //End C# code
}
