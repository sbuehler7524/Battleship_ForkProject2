@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Battleship</PageTitle>

@if ((currentGameState == GameState.Initial) || userInput == "")
{
    <div class="form-group">
        <label>
            Enter your name:
            <input @bind="userInput" />
        </label>
        <button class="play-buton" @onclick="(() => {currentGameState = GameState.Setup;})">Play</button>
    </div>
}

@if (userInput != "" && (currentGameState == GameState.Setup || currentGameState == GameState.Playing))
{
    <div class="user-board">
        <h3>@(currentGameState == GameState.Setup ? "Set Up Board" : "Your Board")</h3>
        @for (int i = 0; i < 10; i++)
        {
            <div class="row">
                @for (int j = 0; j < 10; j++)
                {
                    (int x, int y) coordinate = new (j, i);
                    <button class="square" @onclick='(() => { coordinates = coordinate; })'></button>
                }
            </div>
        }

        @if (currentGameState == GameState.Setup)
        {
            <button class="square" @onclick="(() => { currentGameState = GameState.Playing; })">Start Game</button>
        }
    </div>
}

@if (currentGameState == GameState.Playing)
{
    <div class="player-boards">
        <div class="opponent-board">
            <h3>Opponent's Board</h3>
            @for (int i = 0; i < 10; i++)
            {
                <div class="row">
                    @for (int j = 0; j < 10; j++)
                    {
                        (int x, int y) coordinate = new (i, j);
                        <button class="square" @onclick='(() => { coordinates = coordinate; })'></button>
                    }
                </div>
            }
        </div>

        <button @onclick="Fire" disabled="@(currentGameState == GameState.Waiting || !coordinates.HasValue)">Fire</button>

        <ul id="messagesList">
        @foreach (var move in moves)
        {
            <li>@move</li>
        }
        </ul>
    </div>
}


@code {
    private HubConnection? hubConnection;
    private List<string> moves = new List<string>();
    private string? userInput = "";
    private (int x,int y)? coordinates;

    // Game board tracking (10x10 grids for both players)
    private bool[,] playerBoard = new bool[10,10]; // Stores player's ships
    private bool[,] opponentBoard = new bool[10,10]; // Stores hits/misses on opponent

    private enum GameState { Initial, Setup, Playing, Waiting, GameOver }
    private GameState currentGameState = GameState.Initial;

    private bool isShipHorizontal = true; // To manage ship placement direction
    private int shipCount = 0;
    


    //  runs when client connects
    protected override async Task OnInitializedAsync()
    {
        // create a new connection to the hub
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .WithAutomaticReconnect()
            .Build();

        // when a user and message are received from the connection...
        hubConnection.On<string, string>("ReceiveCoordinates", (user, coordinates) =>
        {
            var formattedMessage = $"{user} fires at {coordinates}";
            moves.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, bool>("ReceiveFireInformation", (user, coordinates, wasHit) =>
        {
            if (wasHit)
            {
                var formattedMessage = wasHit ? $"{user} hit a ship at {coordinates}" : $"{user} missed at {coordinates}";
                moves.Add(formattedMessage);
                InvokeAsync(StateHasChanged);
                // Update board status for hit
            }
            else
            {
                var formattedMessage = $"{user} missed at {coordinates}";
            }
            // Check if all ships are sunk for game over condition
        });

        await hubConnection.StartAsync();
    }

    private async Task Fire()
    {
        if (hubConnection is not null && coordinates.HasValue)
        {
            await hubConnection.SendAsync("SendCoordinates", userInput, coordinates.Value.x, coordinates.Value.y);
            currentGameState = GameState.Playing;
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    private void PlaceShip(int shipLength, int startX, int startY, bool isHorizontal)
    {
        for (int i = 0; i < shipLength; i++)
        {
            if (isHorizontal)
                playerBoard[startX, startY + i] = true;
            else
                playerBoard[startX + i, startY] = true;
        }
    }

//End code
}
